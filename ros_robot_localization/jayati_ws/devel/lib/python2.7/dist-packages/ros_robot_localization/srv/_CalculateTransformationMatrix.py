# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_robot_localization/CalculateTransformationMatrixRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CalculateTransformationMatrixRequest(genpy.Message):
  _md5sum = "d740b4f395b39f49100fa4c30eacb586"
  _type = "ros_robot_localization/CalculateTransformationMatrixRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point a1
geometry_msgs/Point a2
geometry_msgs/Point a3
geometry_msgs/Point a4
geometry_msgs/Point b1
geometry_msgs/Point b2
geometry_msgs/Point b3
geometry_msgs/Point b4

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['a1','a2','a3','a4','b1','b2','b3','b4']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       a1,a2,a3,a4,b1,b2,b3,b4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalculateTransformationMatrixRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.a1 is None:
        self.a1 = geometry_msgs.msg.Point()
      if self.a2 is None:
        self.a2 = geometry_msgs.msg.Point()
      if self.a3 is None:
        self.a3 = geometry_msgs.msg.Point()
      if self.a4 is None:
        self.a4 = geometry_msgs.msg.Point()
      if self.b1 is None:
        self.b1 = geometry_msgs.msg.Point()
      if self.b2 is None:
        self.b2 = geometry_msgs.msg.Point()
      if self.b3 is None:
        self.b3 = geometry_msgs.msg.Point()
      if self.b4 is None:
        self.b4 = geometry_msgs.msg.Point()
    else:
      self.a1 = geometry_msgs.msg.Point()
      self.a2 = geometry_msgs.msg.Point()
      self.a3 = geometry_msgs.msg.Point()
      self.a4 = geometry_msgs.msg.Point()
      self.b1 = geometry_msgs.msg.Point()
      self.b2 = geometry_msgs.msg.Point()
      self.b3 = geometry_msgs.msg.Point()
      self.b4 = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_24d().pack(_x.a1.x, _x.a1.y, _x.a1.z, _x.a2.x, _x.a2.y, _x.a2.z, _x.a3.x, _x.a3.y, _x.a3.z, _x.a4.x, _x.a4.y, _x.a4.z, _x.b1.x, _x.b1.y, _x.b1.z, _x.b2.x, _x.b2.y, _x.b2.z, _x.b3.x, _x.b3.y, _x.b3.z, _x.b4.x, _x.b4.y, _x.b4.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.a1 is None:
        self.a1 = geometry_msgs.msg.Point()
      if self.a2 is None:
        self.a2 = geometry_msgs.msg.Point()
      if self.a3 is None:
        self.a3 = geometry_msgs.msg.Point()
      if self.a4 is None:
        self.a4 = geometry_msgs.msg.Point()
      if self.b1 is None:
        self.b1 = geometry_msgs.msg.Point()
      if self.b2 is None:
        self.b2 = geometry_msgs.msg.Point()
      if self.b3 is None:
        self.b3 = geometry_msgs.msg.Point()
      if self.b4 is None:
        self.b4 = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 192
      (_x.a1.x, _x.a1.y, _x.a1.z, _x.a2.x, _x.a2.y, _x.a2.z, _x.a3.x, _x.a3.y, _x.a3.z, _x.a4.x, _x.a4.y, _x.a4.z, _x.b1.x, _x.b1.y, _x.b1.z, _x.b2.x, _x.b2.y, _x.b2.z, _x.b3.x, _x.b3.y, _x.b3.z, _x.b4.x, _x.b4.y, _x.b4.z,) = _get_struct_24d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_24d().pack(_x.a1.x, _x.a1.y, _x.a1.z, _x.a2.x, _x.a2.y, _x.a2.z, _x.a3.x, _x.a3.y, _x.a3.z, _x.a4.x, _x.a4.y, _x.a4.z, _x.b1.x, _x.b1.y, _x.b1.z, _x.b2.x, _x.b2.y, _x.b2.z, _x.b3.x, _x.b3.y, _x.b3.z, _x.b4.x, _x.b4.y, _x.b4.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.a1 is None:
        self.a1 = geometry_msgs.msg.Point()
      if self.a2 is None:
        self.a2 = geometry_msgs.msg.Point()
      if self.a3 is None:
        self.a3 = geometry_msgs.msg.Point()
      if self.a4 is None:
        self.a4 = geometry_msgs.msg.Point()
      if self.b1 is None:
        self.b1 = geometry_msgs.msg.Point()
      if self.b2 is None:
        self.b2 = geometry_msgs.msg.Point()
      if self.b3 is None:
        self.b3 = geometry_msgs.msg.Point()
      if self.b4 is None:
        self.b4 = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 192
      (_x.a1.x, _x.a1.y, _x.a1.z, _x.a2.x, _x.a2.y, _x.a2.z, _x.a3.x, _x.a3.y, _x.a3.z, _x.a4.x, _x.a4.y, _x.a4.z, _x.b1.x, _x.b1.y, _x.b1.z, _x.b2.x, _x.b2.y, _x.b2.z, _x.b3.x, _x.b3.y, _x.b3.z, _x.b4.x, _x.b4.y, _x.b4.z,) = _get_struct_24d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24d = None
def _get_struct_24d():
    global _struct_24d
    if _struct_24d is None:
        _struct_24d = struct.Struct("<24d")
    return _struct_24d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_robot_localization/CalculateTransformationMatrixResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CalculateTransformationMatrixResponse(genpy.Message):
  _md5sum = "b48e1530098e3d959069d2fe641ca40f"
  _type = "ros_robot_localization/CalculateTransformationMatrixResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Transform tr


================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['tr']
  _slot_types = ['geometry_msgs/Transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalculateTransformationMatrixResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tr is None:
        self.tr = geometry_msgs.msg.Transform()
    else:
      self.tr = geometry_msgs.msg.Transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.tr.translation.x, _x.tr.translation.y, _x.tr.translation.z, _x.tr.rotation.x, _x.tr.rotation.y, _x.tr.rotation.z, _x.tr.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tr is None:
        self.tr = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.tr.translation.x, _x.tr.translation.y, _x.tr.translation.z, _x.tr.rotation.x, _x.tr.rotation.y, _x.tr.rotation.z, _x.tr.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.tr.translation.x, _x.tr.translation.y, _x.tr.translation.z, _x.tr.rotation.x, _x.tr.rotation.y, _x.tr.rotation.z, _x.tr.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tr is None:
        self.tr = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.tr.translation.x, _x.tr.translation.y, _x.tr.translation.z, _x.tr.rotation.x, _x.tr.rotation.y, _x.tr.rotation.z, _x.tr.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
class CalculateTransformationMatrix(object):
  _type          = 'ros_robot_localization/CalculateTransformationMatrix'
  _md5sum = '0cca352eb50cd0fb14f365adcdd04d60'
  _request_class  = CalculateTransformationMatrixRequest
  _response_class = CalculateTransformationMatrixResponse

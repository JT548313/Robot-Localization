// Generated by gencpp from file ros_robot_localization/CalculateTransformationMatrixRequest.msg
// DO NOT EDIT!


#ifndef ROS_ROBOT_LOCALIZATION_MESSAGE_CALCULATETRANSFORMATIONMATRIXREQUEST_H
#define ROS_ROBOT_LOCALIZATION_MESSAGE_CALCULATETRANSFORMATIONMATRIXREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ros_robot_localization
{
template <class ContainerAllocator>
struct CalculateTransformationMatrixRequest_
{
  typedef CalculateTransformationMatrixRequest_<ContainerAllocator> Type;

  CalculateTransformationMatrixRequest_()
    : a1()
    , a2()
    , a3()
    , a4()
    , b1()
    , b2()
    , b3()
    , b4()  {
    }
  CalculateTransformationMatrixRequest_(const ContainerAllocator& _alloc)
    : a1(_alloc)
    , a2(_alloc)
    , a3(_alloc)
    , a4(_alloc)
    , b1(_alloc)
    , b2(_alloc)
    , b3(_alloc)
    , b4(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _a1_type;
  _a1_type a1;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _a2_type;
  _a2_type a2;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _a3_type;
  _a3_type a3;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _a4_type;
  _a4_type a4;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _b1_type;
  _b1_type b1;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _b2_type;
  _b2_type b2;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _b3_type;
  _b3_type b3;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _b4_type;
  _b4_type b4;





  typedef boost::shared_ptr< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CalculateTransformationMatrixRequest_

typedef ::ros_robot_localization::CalculateTransformationMatrixRequest_<std::allocator<void> > CalculateTransformationMatrixRequest;

typedef boost::shared_ptr< ::ros_robot_localization::CalculateTransformationMatrixRequest > CalculateTransformationMatrixRequestPtr;
typedef boost::shared_ptr< ::ros_robot_localization::CalculateTransformationMatrixRequest const> CalculateTransformationMatrixRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator1> & lhs, const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a1 == rhs.a1 &&
    lhs.a2 == rhs.a2 &&
    lhs.a3 == rhs.a3 &&
    lhs.a4 == rhs.a4 &&
    lhs.b1 == rhs.b1 &&
    lhs.b2 == rhs.b2 &&
    lhs.b3 == rhs.b3 &&
    lhs.b4 == rhs.b4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator1> & lhs, const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_robot_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d740b4f395b39f49100fa4c30eacb586";
  }

  static const char* value(const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd740b4f395b39f49ULL;
  static const uint64_t static_value2 = 0x100fa4c30eacb586ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_robot_localization/CalculateTransformationMatrixRequest";
  }

  static const char* value(const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point a1\n"
"geometry_msgs/Point a2\n"
"geometry_msgs/Point a3\n"
"geometry_msgs/Point a4\n"
"geometry_msgs/Point b1\n"
"geometry_msgs/Point b2\n"
"geometry_msgs/Point b3\n"
"geometry_msgs/Point b4\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.a4);
      stream.next(m.b1);
      stream.next(m.b2);
      stream.next(m.b3);
      stream.next(m.b4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalculateTransformationMatrixRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_robot_localization::CalculateTransformationMatrixRequest_<ContainerAllocator>& v)
  {
    s << indent << "a1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.a3);
    s << indent << "a4: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.a4);
    s << indent << "b1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.b1);
    s << indent << "b2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.b2);
    s << indent << "b3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.b3);
    s << indent << "b4: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.b4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ROBOT_LOCALIZATION_MESSAGE_CALCULATETRANSFORMATIONMATRIXREQUEST_H
